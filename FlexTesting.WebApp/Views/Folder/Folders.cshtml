@using FlexTesting.Core.Contract.Helpers
@model KanbanViewModel

<body>
	<div class="flex-row d-flex justify-content-between">
		<h1 class="text-truncate" id="folder-header">@Model.Folder.Name</h1>
		<div class="flex-row d-flex">
			<a class="text-decoration-none" href="#" data-toggle="modal" data-target="#add-task-modal">
				<h1><i class="bi bi-plus-circle" data-toggle="tooltip" data-placement="bottom" title="Добавить задачу"></i></h1>
			</a>
			<a class="text-decoration-none" style="margin-left: 2rem;" href="#" data-toggle="modal" data-target="#settings">
				<h1><i class="bi bi-gear" data-toggle="tooltip" data-placement="bottom" title="Настройки папки"></i></h1>
			</a>
		</div>
	</div>
	<hr />
	<div class="container-fluid overflow-auto" id="desk">
		@{
			await Html.RenderPartialAsync("Desk", Model);
		}
	</div>
	<!--settings-->
	<div class="modal fade" id="settings" tabindex="-1" role="dialog" data-keyboard="false">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Настройки</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="form-group d-flex flex-column">
						<h6>Изменение названия папки:</h6>
						<div class="input-group mb-3">
							<input type="text" id="rename-title" value="" class="form-control" placeholder=@Model.Folder.Name>
							<div class="input-group-append">
								<input class="btn btn-outline-success" disabled type="submit" value="Сохранить" id="rename-folder" />
							</div>
						</div>
					</div>
					<hr />
					<div class="input-group mb-3">
						<h6>Статусы задач:</h6>
						<div class="input-group mb-3">
							<input type="text" id="status-title" class="form-control" placeholder="Название статуса">
							<div class="input-group-append">
								<input class="btn btn-outline-success" type="button" disabled id="add-status" value="Добавить" />
							</div>
						</div>
						<span class="alert alert-info">Перемещайте элементы, чтобы установить порядок статусов.</span>
						<ul id="statuses" class="list-group w-100">
							@foreach (var task in Model.StatusList)
							{
								<li id="@task.Id" class="status_item list-group-item draggable rounded-sm" draggable="true">
									@task.Name
								</li>
							}
						</ul>
						<span class="alert alert-danger">При удалении элемента тест-кейсы перенесутся на предыдущий либо начальный по порядку статус.</span>
						<div class="alert alert-danger py-xl-3 text-center" style="width:inherit;display:none;" id="delete-zone" ondragover="enterDeleteZ(event)" ondragleave="leaveDeleteZ(event)" ondrop="dropToDeleteZ(event)">
							<i class="bi bi-trash"></i>
							<span>Удалить статус</span>
						</div>
						<hr />
						<div class="form-group d-flex flex-column">
							<h6>Удаление папки:</h6>
							<span class="alert alert-danger" style="width:inherit">
								Безопасное удаление лишь скроет папку из общего списка, позже ее можно восстановить. После полного удаления файлы будут безвозвратно стёрты.
							</span>
							<div class="custom-control custom-switch py-xl-2">
								<input type="checkbox" class="custom-control-input" checked id="safe-delete-settings">
								<label class="custom-control-label" for="safe-delete-settings">Безопасное удаление</label>
							</div>
							<div class="input-group mb-3">
								<input type="text" id="delete-title-settings" value="" class="form-control" placeholder="Введите название папки для подтверждения">
								<div class="input-group-append">
									<input class="btn btn-outline-danger" id="delete-settings" type="submit" disabled value="Удалить" onclick="" />
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!--add-task-->
	<div class="modal fade" id="add-task-modal" tabindex="-1" role="dialog" data-keyboard="false">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Добавление новой задачи</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<form method="post" asp-action="Create" asp-controller="Issue" asp-route-id="@Model.Folder.Id" asp-anti-forgery="true">
						<div class="validation" asp-validation-summary="ModelOnly"></div>
						<div>
							<div class="form-group">
								<label asp-for="CreateIssueDto.Name">Название: </label><br />
								<input type="text" asp-for="CreateIssueDto.Name" class="form-control" />
								<span asp-validation-for="CreateIssueDto.Name"></span>
							</div>
							<div class="form-group">
								<label asp-for="CreateIssueDto.Description">Описание: </label><br />
								<textarea asp-for="CreateIssueDto.Description" class="form-control"></textarea>
								<span asp-validation-for="CreateIssueDto.Description"></span>
							</div>
							<div class="form-group">
								<label asp-for="CreateIssueDto.StatusId">Статус: </label><br />
								<select asp-for="CreateIssueDto.StatusId" class="custom-select">
									@foreach (var s in Model.StatusList)
									{
										<option value="@s.Id">@s.Name</option>
									}
								</select>
								<span asp-validation-for="CreateIssueDto.StatusId"></span>
							</div>
							<div class="modal-footer">
								<button type="button" class="btn btn-secondary" data-dismiss="modal" data-target="#add-task-modal">Отмена</button>
								<input type="submit" value="Добавить" class="btn btn-success" />
							</div>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
</body>
<script type="text/javascript">
	window.onload = function () {
		updateDropzones();
		document.getElementById("folder-stack").style.display = "none";
	}

	function stringNotEmpty(string) {
		return string.length > 0;
	}

	//rename folder
	document.getElementById('rename-title').addEventListener('input', function (res) {
		if (res.target.value !== '@Model.Folder.Name' && stringNotEmpty(res.target.value))
			document.getElementById('rename-folder').removeAttribute('disabled');
		else document.getElementById('rename-folder').setAttribute('disabled', 'true');
	});

	document.getElementById('rename-folder').addEventListener('click', function () {
		var title = document.getElementById("rename-title").value;
		var url = "/Folder/RenameFolder?id=@Model.Folder.Id&title=" + title;
		PostAsync(url).then(function () {
			$('#folder-header').text(title);
			refreshFolders();
		});
	});

	//delete folder - settings
	document.getElementById('delete-title-settings').addEventListener('input', function (event) {
		titleCheck(event, '@Model.Folder.Name', document.getElementById('delete-settings'));
	});

	document.getElementById('delete-settings').addEventListener('click', function (event) {
		deleteFolder('@Model.Folder.Id', $('#safe-delete-settings').prop('checked'));
	});

	//update desk
	function updateDesk() {
		document.getElementById("desk").innerHTML = null;
		$('#desk').load('/Status/Update?folderId=@Model.Folder.Id');
	}

	//create and add status to list in modal
	document.getElementById('status-title').addEventListener('input', function (res) {
		if (stringNotEmpty(res.target.value))
			document.getElementById("add-status").removeAttribute('disabled');
		else document.getElementById("add-status").setAttribute('disabled', 'true');
	});

	const list = $('#statuses');
    document.getElementById("add-status").addEventListener("click", (event) => {
		var title = document.getElementById("status-title").value;
        var url = "/Status/Create?folderId=@Model.Folder.Id&title=" + title;
		GetAsync(url).then(function (res) {
			var item = $('<li class="status_item list-group-item draggable rounded-sm" draggable="true"></li>');
			item.text(title);
			item.attr('id', res);
			item.appendTo(list);
			document.getElementById("status-title").value = null;
			document.getElementById("add-status").setAttribute('disabled', 'true');
			updateDesk();
        });
    });

    //drag status in settings
    const tasksList = document.querySelector('#statuses');
	tasksList.addEventListener('dragstart', (event) => {
		document.getElementById('delete-zone').style.display = 'initial';
        event.target.classList.add('selected');
	});

    tasksList.addEventListener('dragover', (event) => {
        event.preventDefault();
        const selected = tasksList.querySelector('.selected');
        const focused = event.target;
        if (selected !== focused && focused.classList.contains('status_item')) {
            const next = (focused === selected.nextElementSibling) ?
                focused.nextElementSibling : focused;
            tasksList.insertBefore(selected, next);
		}
	});

    tasksList.addEventListener('dragend', (event) => {
		var items = new Array();
        $('.status_item').each(function () {
        items.push($(this).prop('id'));
        });
        var result = btoa(items.toString());
		var url = "/Status/Order?folderId=@Model.Folder.Id&order=" + result;
		PostAsync(url).then(function (res) {
			event.target.classList.remove('selected');
			updateDesk();
		});
		document.getElementById('delete-zone').style.display = 'none';
        });

	//drag status to delete drop zone
	function enterDeleteZ(event) {
		event.preventDefault();
		if (document.querySelectorAll('.selected').length > 0) {
			document.getElementById('delete-zone').style.border = '2px dashed palevioletred';
		}
	}

	function leaveDeleteZ(event) {
		document.getElementById('delete-zone').style.border = null;
	}

	function dropToDeleteZ(event) {
		const selected = tasksList.querySelector('.selected');
		var url = '/Status/Delete?id=' + selected.id;
		PostAsync(url).then(function (res) {
			selected.remove();
			updateDesk();
		});
	}
</script>